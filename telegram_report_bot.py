import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, ContextTypes, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING, TICKET_UPLOAD, REPORT_TEXT, CONFIRMATION = range(4)

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∑–¥–µ—Å—å
user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º."""
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    
    await update.message.reply_text(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–∞–ø–æ—Ä—Ç.\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É'.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_request")
        ]])
    )
    
    return CHOOSING

async def create_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É'."""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user_data[user_id] = {}
    
    await query.edit_message_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ç–∞–ª–æ–Ω–æ–º.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
        ]])
    )
    
    return TICKET_UPLOAD

async def ticket_upload(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:  
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å —Ç–∞–ª–æ–Ω–æ–º."""  
    user = update.message.from_user  
    user_id = user.id  

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª  
    if update.message.document:  
        file = update.message.document  
        file_id = file.file_id  
        file_name = file.file_name  

        try:  
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ  
            user_data[user_id]['ticket_file_id'] = file_id  
            user_data[user_id]['ticket_file_name'] = file_name  

            await update.message.reply_text(  
                f"–§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.\n\n"  
                "–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ —Å–æ—Å—Ç–∞–≤–ª—è—é—â–µ–µ —Ä–∞–ø–æ—Ä—Ç–∞: –∫—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, —Ü–µ–ª—å, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏ —Ç.–¥."  
            )  

            return REPORT_TEXT  
        except Exception as e:  
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")  
            await update.message.reply_text(  
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."  
            )  
            return TICKET_UPLOAD  
    else:  
        await update.message.reply_text(  
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ç–∞–ª–æ–Ω–æ–º. –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —Ñ–∞–π–ª–∞, "  
            "—Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –µ–≥–æ, –∞ –∑–∞—Ç–µ–º –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞—è–≤–∫–∏."  
        )  

        return TICKET_UPLOAD

async def report_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞–ø–æ—Ä—Ç–∞."""
    user = update.message.from_user
    user_id = user.id
    report_text = update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Ä–∞–ø–æ—Ä—Ç–∞
    user_data[user_id]['report_text'] = report_text
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    summary = (
        "üìã –°–≤–æ–¥–∫–∞ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏:\n\n"
        f"üìé –§–∞–π–ª: {user_data[user_id]['ticket_file_name']}\n\n"
        f"üìù –¢–µ–∫—Å—Ç —Ä–∞–ø–æ—Ä—Ç–∞:\n{report_text}\n\n"
        "–í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ? –ï—Å–ª–∏ –¥–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É."
    )
    
    await update.message.reply_text(
        summary,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
        ])
    )
    
    return CONFIRMATION

async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    # –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    
    await query.edit_message_text(
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
        "–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #" + str(user_id)[-5:] + "\n"
        "–ö–æ–≥–¥–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_data:
        del user_data[user_id]
    
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏."""
    query = update.callback_query
    user_id = query.from_user.id
    
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_data:
        del user_data[user_id]
    
    await query.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    
    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    await update.message.reply_text(
        "üîç –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞–ø–æ—Ä—Ç —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞. "
        "–í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å —Ç–∞–ª–æ–Ω–æ–º –∏ –æ–ø–∏—Å–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ä–∞–ø–æ—Ä—Ç–∞."
    )

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    application = Application.builder().token(os.environ.get("TELEGRAM_BOT_TOKEN")).build()

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING: [
                CallbackQueryHandler(create_request, pattern="^create_request$"),
            ],
            TICKET_UPLOAD: [
                MessageHandler(filters.Document.ALL, ticket_upload),
                CallbackQueryHandler(cancel, pattern="^cancel$"),
            ],
            REPORT_TEXT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, report_text),
            ],
            CONFIRMATION: [
                CallbackQueryHandler(confirm, pattern="^confirm$"),
                CallbackQueryHandler(cancel, pattern="^cancel$"),
            ],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("help", help_command))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
